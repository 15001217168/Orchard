/*
 * This gulpfile enables compilation of the LESS files in this project.
 * 
 * To use this file you will need to:
 * - Install Node.js on your machine
 * - Run "npm install" in this folder (either via command line or a Visual Studio extension) to install dependency packages from package.json
 * 
 * NOTE: If you install the Task Runner Explorer extension in Visual Studio the tasks in this
 * gulpfile will execute automatically on VS events for a more integrated/automated workflow. That's the 
 * purpose of the <binding> comment element at the top.
 */

var glob = require("glob"),
    path = require("path-posix"),
    merge = require("merge-stream"),
    gulpif = require("gulp-if"),
    gulp = require("gulp"),
    newer = require("gulp-newer"),
	plumber = require("gulp-plumber"),
    sourcemaps = require("gulp-sourcemaps"),
    less = require("gulp-less"),
	autoprefixer = require("gulp-autoprefixer"),
	minify = require("gulp-minify-css"),
    typescript = require("gulp-typescript"),
	uglify = require("gulp-uglify"),
	rename = require("gulp-rename"),
    concat = require("gulp-concat"),
	header = require("gulp-header")

/*
** GULP TASKS
*/

gulp.task("build", function () {
    var assetGroupTasks = getAssetGroups().map(createAssetGroupTask);
    return merge(assetGroupTasks);
});

gulp.task("watch", function () {
    getAssetGroups().forEach(function (assetGroup) {
        gulp.watch(assetGroup.inputPaths, function (event) {
            console.log("Asset file '" + event.path + "' was " + event.type + ", rebuilding output '" + assetGroup.outputPath + "'.");
            var task = createAssetGroupTask(assetGroup);
        });
    });
});

/*
** ASSET GROUPS
*/

function getAssetGroups() {
    var assetManifestPaths = glob.sync("Orchard.Web/{Core,Modules,Themes}/*/Assets.json");
    var assetGroups = [];
    assetManifestPaths.forEach(function (assetManifestPath) {
        var assetManifest = require("./" + assetManifestPath);
        assetManifest.forEach(function (assetGroup) {
            resolveAssetGroupPaths(assetGroup, assetManifestPath);
            assetGroups.push(assetGroup);
        });
    });
    return assetGroups;
}

function resolveAssetGroupPaths(assetGroup, assetManifestPath) {
    assetGroup.basePath = path.dirname(assetManifestPath);
    assetGroup.inputPaths = assetGroup.inputs.map(function (inputPath) {
        return path.join(assetGroup.basePath, inputPath);
    });
    assetGroup.outputPath = path.join(assetGroup.basePath, assetGroup.output);
    assetGroup.outputDir = path.dirname(assetGroup.outputPath);
    assetGroup.outputFileName = path.basename(assetGroup.output);
}

function createAssetGroupTask(assetGroup) {
    var outputExt = path.extname(assetGroup.output).toLowerCase();
    switch (outputExt) {
        case ".css":
            return buildCssGroup(assetGroup);
        case ".js":
            return buildJsGroup(assetGroup);
    }
}

/*
** PROCESSING PIPELINES
*/

function buildCssGroup(assetGroup) {
    return gulp.src(assetGroup.inputPaths)
        //.pipe(newer(assetGroup.outputPath))
        .pipe(plumber())
        .pipe(sourcemaps.init())
        .pipe(gulpif("*.less", less()))
        .pipe(concat(assetGroup.outputFileName))
        .pipe(autoprefixer({ browsers: ["last 2 versions"] }))
        //.pipe(header(
        //    "/*\n" +
        //    "** NOTE: This file is generated by Gulp compilation and should not be edited directly!\n" +
        //    "** Any changes made directly to this file will be overwritten next time the Gulp compilation runs.\n" +
        //    "** For more information, see the Readme.txt file in the Gulp solution folder.\n" +
        //    "*/\n\n"))
        .pipe(sourcemaps.write())
        .pipe(gulp.dest(assetGroup.outputDir))
        .pipe(minify())
        .pipe(rename({
            suffix: ".min"
        }))
        .pipe(gulp.dest(assetGroup.outputDir));
}

function buildJsGroup(assetGroup) {
    return gulp.src(assetGroup.inputPaths)
        //.pipe(newer(assetGroup.outputPath))
		.pipe(plumber())
        .pipe(sourcemaps.init())
        .pipe(gulpif("*.ts", typescript({
            declaration: false,
            noImplicitAny: true,
            noEmitOnError: true,
            sortOutput: true,
        }).js))
		.pipe(concat(assetGroup.outputFileName))
        //.pipe(header(
        //    "/*\n" +
        //    "** NOTE: This file is generated by Gulp compilation and should not be edited directly!\n" +
        //    "** Any changes made directly to this file will be overwritten next time the Gulp compilation runs.\n" +
        //    "** For more information, see the Readme.txt file in the Gulp solution folder.\n" +
        //    "*/\n\n"))
        .pipe(sourcemaps.write())
        .pipe(gulp.dest(assetGroup.outputDir))
		.pipe(uglify())
		.pipe(rename({
		    suffix: ".min"
		}))
		.pipe(gulp.dest(assetGroup.outputDir));
}

// TEST: Errors, startup, VS2013