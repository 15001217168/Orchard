@using Orchard.ContentManagement
@using Orchard.ImportExport.Permissions

@{
    var items = (IEnumerable<IContent>)Model.ContentItems;
    
    Layout.Title = T("Deployment Sources and Targets");

    var returnUrl = Request.RawUrl;
}

@using (Html.BeginFormAntiForgeryPost()) { 
    @Html.ValidationSummary()
    <fieldset>
        <p>@T("Configure deployment locations to push content out or pull content in from")</p>
    </fieldset>
    <div class="manage">
        @Html.ActionLink(T("Configure a new deployment source / target").ToString(), "Create", new { area = "Orchard.ImportExport", controller = "DeploymentConfiguration", ReturnUrl = Context.Request.RawUrl }, new { @class = "button primaryAction" })
    </div>
    <table class="items">
        <thead>
            <tr>
                <th scope="col">@T("Description")</th>
                <th scope="col" class="actions">&nbsp;</th>
            </tr>
        </thead>
        @foreach (var item in items) { 
            <tr>
                <td>
                    @Html.ItemEditLinkWithReturnUrl(Html.ItemDisplayText(item).ToString(), item)
                </td>
                <td style="text-align: right">
                    @Html.ActionLink(T("Test").Text, "TestConnection", new {id = item.Id}) |
                    @Html.ItemEditLinkWithReturnUrl(T("Edit").Text, item) |
                    @if (Authorizer.Authorize(DeploymentPermissions.ConfigureDeployments, item)) {
                        @Html.Link(T("Delete").Text, Url.ItemRemoveUrl(item, new {returnUrl}), new {itemprop = "RemoveUrl UnsafeUrl"})
                    }
                </td>
            </tr>
        }
    </table>
    @Display(Model.Pager)
}
