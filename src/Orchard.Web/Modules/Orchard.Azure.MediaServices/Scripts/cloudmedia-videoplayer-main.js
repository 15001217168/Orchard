/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

/// <reference path="Typings/jquery.d.ts" />
/// <reference path="Typings/underscore.d.ts" />
var Orchard;
(function (Orchard) {
    var Azure;
    (function (Azure) {
        var MediaServices;
        (function (MediaServices) {
            var VideoPlayer;
            (function (VideoPlayer) {
                var Injectors = Orchard.Azure.MediaServices.VideoPlayer.Injectors;
                $(function () {
                    $(".cloudmedia-videoplayer-container").each(function (index, elem) {
                        var container = elem;
                        var assetData = $(elem).data("cloudvideo-player-assetdata");
                        var playerWidth = $(elem).data("cloudvideo-player-width");
                        var playerHeight = $(elem).data("cloudvideo-player-height");
                        var applyMediaQueries = $(elem).data("cloudvideo-player-applymediaqueries");
                        var autoPlay = $(elem).data("cloudvideo-player-autoplay");
                        var contentBaseUrl = $(elem).data("cloudvideo-player-content-baseurl");
                        var errorText = $(elem).data("cloudvideo-player-errortext");
                        var altText = $(elem).data("cloudvideo-player-alttext");
                        var retryText = $(elem).data("cloudvideo-player-retrytext");
                        function invokeInjectors() {
                            $(container).empty();
                            var alternateContent = [
                                $("<span>").addClass("cloudvideo-player-error-text").text(errorText),
                                $("<button>").addClass("cloudvideo-player-retry-button").text(retryText).click(function () {
                                    invokeInjectors();
                                }),
                                $("<span>").addClass("cloudvideo-player-alt-text").text(altText)
                            ];
                            // Construct a chain of injectors (each will invoke the next on failure).
                            var altInjector = new Injectors.AltInjector(container, playerWidth, playerHeight, assetData, applyMediaQueries, true, null, alternateContent);
                            var html5Injector = new Injectors.Html5Injector(container, playerWidth, playerHeight, autoPlay, assetData, applyMediaQueries, true, altInjector);
                            var dashInjector = new Injectors.DashInjector(container, playerWidth, playerHeight, autoPlay, assetData, applyMediaQueries, true, html5Injector);
                            var smpInjector = new Injectors.SmpInjector(container, playerWidth, playerHeight, autoPlay, assetData, applyMediaQueries, true, dashInjector, contentBaseUrl);
                            var firstInjector = smpInjector;
                            firstInjector.invoke();
                        }
                        invokeInjectors();
                    });
                });
            })(VideoPlayer = MediaServices.VideoPlayer || (MediaServices.VideoPlayer = {}));
        })(MediaServices = Azure.MediaServices || (Azure.MediaServices = {}));
    })(Azure = Orchard.Azure || (Orchard.Azure = {}));
})(Orchard || (Orchard = {}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsb3VkbWVkaWEtdmlkZW9wbGF5ZXItbWFpbi50cyJdLCJuYW1lcyI6WyJPcmNoYXJkIiwiT3JjaGFyZC5BenVyZSIsIk9yY2hhcmQuQXp1cmUuTWVkaWFTZXJ2aWNlcyIsIk9yY2hhcmQuQXp1cmUuTWVkaWFTZXJ2aWNlcy5WaWRlb1BsYXllciIsImludm9rZUluamVjdG9ycyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw0Q0FBNEM7QUFDNUMsZ0RBQWdEO0FBRWhELElBQU8sT0FBTyxDQTRDYjtBQTVDRCxXQUFPLE9BQU87SUFBQ0EsSUFBQUEsS0FBS0EsQ0E0Q25CQTtJQTVDY0EsV0FBQUEsS0FBS0E7UUFBQ0MsSUFBQUEsYUFBYUEsQ0E0Q2pDQTtRQTVDb0JBLFdBQUFBLGFBQWFBO1lBQUNDLElBQUFBLFdBQVdBLENBNEM3Q0E7WUE1Q2tDQSxXQUFBQSxXQUFXQSxFQUFDQSxDQUFDQTtnQkFHNUNDLElBQU9BLFNBQVNBLEdBQUdBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLGFBQWFBLENBQUNBLFdBQVdBLENBQUNBLFNBQVNBLENBQUNBO2dCQUVyRUEsQ0FBQ0EsQ0FBQ0E7b0JBQ0UsQ0FBQyxDQUFDLG1DQUFtQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsS0FBSyxFQUFFLElBQUk7d0JBQzdELElBQUksU0FBUyxHQUFnQixJQUFJLENBQUM7d0JBRWxDLElBQUksU0FBUyxHQUFvQixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLDZCQUE2QixDQUFDLENBQUM7d0JBQzdFLElBQUksV0FBVyxHQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQzt3QkFDbEUsSUFBSSxZQUFZLEdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO3dCQUNwRSxJQUFJLGlCQUFpQixHQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMscUNB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QUxBLGFBQUtBLEtBQUxBLGFBQUtBLFFBNENuQkE7QUFBREEsQ0FBQ0EsRUE1Q00sT0FBTyxLQUFQLE9BQU8sUUE0Q2IiLCJmaWxlIjoiY2xvdWRtZWRpYS12aWRlb3BsYXllci1tYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIlR5cGluZ3MvanF1ZXJ5LmQudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiVHlwaW5ncy91bmRlcnNjb3JlLmQudHNcIiAvPlxyXG5cclxubW9kdWxlIE9yY2hhcmQuQXp1cmUuTWVkaWFTZXJ2aWNlcy5WaWRlb1BsYXllciB7XHJcblxyXG4gICAgaW1wb3J0IERhdGEgPSBPcmNoYXJkLkF6dXJlLk1lZGlhU2VydmljZXMuVmlkZW9QbGF5ZXIuRGF0YTtcclxuICAgIGltcG9ydCBJbmplY3RvcnMgPSBPcmNoYXJkLkF6dXJlLk1lZGlhU2VydmljZXMuVmlkZW9QbGF5ZXIuSW5qZWN0b3JzO1xyXG5cclxuICAgICQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQoXCIuY2xvdWRtZWRpYS12aWRlb3BsYXllci1jb250YWluZXJcIikuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW0pIHtcclxuICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IDxIVE1MRWxlbWVudD5lbGVtO1xyXG5cclxuICAgICAgICAgICAgdmFyIGFzc2V0RGF0YTogRGF0YS5JQXNzZXREYXRhID0gJChlbGVtKS5kYXRhKFwiY2xvdWR2aWRlby1wbGF5ZXItYXNzZXRkYXRhXCIpO1xyXG4gICAgICAgICAgICB2YXIgcGxheWVyV2lkdGg6IG51bWJlciA9ICQoZWxlbSkuZGF0YShcImNsb3VkdmlkZW8tcGxheWVyLXdpZHRoXCIpO1xyXG4gICAgICAgICAgICB2YXIgcGxheWVySGVpZ2h0OiBudW1iZXIgPSAkKGVsZW0pLmRhdGEoXCJjbG91ZHZpZGVvLXBsYXllci1oZWlnaHRcIik7XHJcbiAgICAgICAgICAgIHZhciBhcHBseU1lZGlhUXVlcmllczogYm9vbGVhbiA9ICQoZWxlbSkuZGF0YShcImNsb3VkdmlkZW8tcGxheWVyLWFwcGx5bWVkaWFxdWVyaWVzXCIpO1xyXG4gICAgICAgICAgICB2YXIgYXV0b1BsYXk6IGJvb2xlYW4gPSAkKGVsZW0pLmRhdGEoXCJjbG91ZHZpZGVvLXBsYXllci1hdXRvcGxheVwiKTtcclxuICAgICAgICAgICAgdmFyIGNvbnRlbnRCYXNlVXJsOiBzdHJpbmcgPSAkKGVsZW0pLmRhdGEoXCJjbG91ZHZpZGVvLXBsYXllci1jb250ZW50LWJhc2V1cmxcIik7XHJcbiAgICAgICAgICAgIHZhciBlcnJvclRleHQ6IHN0cmluZyA9ICQoZWxlbSkuZGF0YShcImNsb3VkdmlkZW8tcGxheWVyLWVycm9ydGV4dFwiKTtcclxuICAgICAgICAgICAgdmFyIGFsdFRleHQ6IHN0cmluZyA9ICQoZWxlbSkuZGF0YShcImNsb3VkdmlkZW8tcGxheWVyLWFsdHRleHRcIik7XHJcbiAgICAgICAgICAgIHZhciByZXRyeVRleHQ6IHN0cmluZyA9ICQoZWxlbSkuZGF0YShcImNsb3VkdmlkZW8tcGxheWVyLXJldHJ5dGV4dFwiKTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGludm9rZUluamVjdG9ycygpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAkKGNvbnRhaW5lcikuZW1wdHkoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgYWx0ZXJuYXRlQ29udGVudCA9IFtcclxuICAgICAgICAgICAgICAgICAgICAkKFwiPHNwYW4+XCIpLmFkZENsYXNzKFwiY2xvdWR2aWRlby1wbGF5ZXItZXJyb3ItdGV4dFwiKS50ZXh0KGVycm9yVGV4dCksXHJcbiAgICAgICAgICAgICAgICAgICAgJChcIjxidXR0b24+XCIpLmFkZENsYXNzKFwiY2xvdWR2aWRlby1wbGF5ZXItcmV0cnktYnV0dG9uXCIpLnRleHQocmV0cnlUZXh0KS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGludm9rZUluamVjdG9ycygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICQoXCI8c3Bhbj5cIikuYWRkQ2xhc3MoXCJjbG91ZHZpZGVvLXBsYXllci1hbHQtdGV4dFwiKS50ZXh0KGFsdFRleHQpXHJcbiAgICAgICAgICAgICAgICBdO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIENvbnN0cnVjdCBhIGNoYWluIG9mIGluamVjdG9ycyAoZWFjaCB3aWxsIGludm9rZSB0aGUgbmV4dCBvbiBmYWlsdXJlKS5cclxuICAgICAgICAgICAgICAgIHZhciBhbHRJbmplY3RvciA9IG5ldyBJbmplY3RvcnMuQWx0SW5qZWN0b3IoY29udGFpbmVyLCBwbGF5ZXJXaWR0aCwgcGxheWVySGVpZ2h0LCBhc3NldERhdGEsIGFwcGx5TWVkaWFRdWVyaWVzLCB0cnVlLCBudWxsLCBhbHRlcm5hdGVDb250ZW50KTtcclxuICAgICAgICAgICAgICAgIHZhciBodG1sNUluamVjdG9yID0gbmV3IEluamVjdG9ycy5IdG1sNUluamVjdG9yKGNvbnRhaW5lciwgcGxheWVyV2lkdGgsIHBsYXllckhlaWdodCwgYXV0b1BsYXksIGFzc2V0RGF0YSwgYXBwbHlNZWRpYVF1ZXJpZXMsIHRydWUsIGFsdEluamVjdG9yKTtcclxuICAgICAgICAgICAgICAgIHZhciBkYXNoSW5qZWN0b3IgPSBuZXcgSW5qZWN0b3JzLkRhc2hJbmplY3Rvcihjb250YWluZXIsIHBsYXllcldpZHRoLCBwbGF5ZXJIZWlnaHQsIGF1dG9QbGF5LCBhc3NldERhdGEsIGFwcGx5TWVkaWFRdWVyaWVzLCB0cnVlLCBodG1sNUluamVjdG9yKTtcclxuICAgICAgICAgICAgICAgIHZhciBzbXBJbmplY3RvciA9IG5ldyBJbmplY3RvcnMuU21wSW5qZWN0b3IoY29udGFpbmVyLCBwbGF5ZXJXaWR0aCwgcGxheWVySGVpZ2h0LCBhdXRvUGxheSwgYXNzZXREYXRhLCBhcHBseU1lZGlhUXVlcmllcywgdHJ1ZSwgZGFzaEluamVjdG9yLCBjb250ZW50QmFzZVVybCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGZpcnN0SW5qZWN0b3I6IEluamVjdG9ycy5JbmplY3RvciA9IHNtcEluamVjdG9yO1xyXG4gICAgICAgICAgICAgICAgZmlyc3RJbmplY3Rvci5pbnZva2UoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW52b2tlSW5qZWN0b3JzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufSJdfQ==
