/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

/// <reference path="Typings/jquery.d.ts" />
/// <reference path="Typings/underscore.d.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Orchard;
(function (Orchard) {
    var Azure;
    (function (Azure) {
        var MediaServices;
        (function (MediaServices) {
            var VideoPlayer;
            (function (VideoPlayer) {
                var Injectors;
                (function (Injectors) {
                    var AltInjector = (function (_super) {
                        __extends(AltInjector, _super);
                        function AltInjector(container, playerWidth, playerHeight, assetData, applyMediaQueries, debugToConsole, nextInjector, alternateContent) {
                            _super.call(this, container, playerWidth, playerHeight, false, assetData, applyMediaQueries, debugToConsole, nextInjector);
                            this.alternateContent = alternateContent;
                        }
                        AltInjector.prototype.isSupported = function () {
                            return true;
                        };
                        AltInjector.prototype.inject = function () {
                            var firstThumbnailAsset = _(this.filteredAssets().ThumbnailAssets).first();
                            this.debug("Injecting alternate content into element '{0}'.", this.container.id);
                            var wrapper = $("<div>")
                                .addClass("cloudvideo-player-alt-wrapper")
                                .css("width", this.playerWidth)
                                .css("height", this.playerHeight);
                            if (firstThumbnailAsset)
                                wrapper.css("background-image", "url('" + firstThumbnailAsset.MainFileUrl + "')");
                            var inner = $("<div>").addClass("cloudvideo-player-alt-inner").appendTo(wrapper);
                            if (this.alternateContent)
                                _(this.alternateContent).each(function (elem) { $(elem).appendTo(inner); });
                            wrapper.appendTo(this.container);
                        };
                        AltInjector.prototype.debug = function (message) {
                            var args = [];
                            for (var _i = 1; _i < arguments.length; _i++) {
                                args[_i - 1] = arguments[_i];
                            }
                            _super.prototype.debug.call(this, "AltInjector: " + message, args);
                        };
                        return AltInjector;
                    })(Injectors.Injector);
                    Injectors.AltInjector = AltInjector;
                })(Injectors = VideoPlayer.Injectors || (VideoPlayer.Injectors = {}));
            })(VideoPlayer = MediaServices.VideoPlayer || (MediaServices.VideoPlayer = {}));
        })(MediaServices = Azure.MediaServices || (Azure.MediaServices = {}));
    })(Azure = Orchard.Azure || (Orchard.Azure = {}));
})(Orchard || (Orchard = {}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsb3VkbWVkaWEtdmlkZW9wbGF5ZXItaW5qZWN0b3JzLWFsdC50cyJdLCJuYW1lcyI6WyJPcmNoYXJkIiwiT3JjaGFyZC5BenVyZSIsIk9yY2hhcmQuQXp1cmUuTWVkaWFTZXJ2aWNlcyIsIk9yY2hhcmQuQXp1cmUuTWVkaWFTZXJ2aWNlcy5WaWRlb1BsYXllciIsIk9yY2hhcmQuQXp1cmUuTWVkaWFTZXJ2aWNlcy5WaWRlb1BsYXllci5JbmplY3RvcnMiLCJPcmNoYXJkLkF6dXJlLk1lZGlhU2VydmljZXMuVmlkZW9QbGF5ZXIuSW5qZWN0b3JzLkFsdEluamVjdG9yIiwiT3JjaGFyZC5BenVyZS5NZWRpYVNlcnZpY2VzLlZpZGVvUGxheWVyLkluamVjdG9ycy5BbHRJbmplY3Rvci5jb25zdHJ1Y3RvciIsIk9yY2hhcmQuQXp1cmUuTWVkaWFTZXJ2aWNlcy5WaWRlb1BsYXllci5JbmplY3RvcnMuQWx0SW5qZWN0b3IuaXNTdXBwb3J0ZWQiLCJPcmNoYXJkLkF6dXJlLk1lZGlhU2VydmljZXMuVmlkZW9QbGF5ZXIuSW5qZWN0b3JzLkFsdEluamVjdG9yLmluamVjdCIsIk9yY2hhcmQuQXp1cmUuTWVkaWFTZXJ2aWNlcy5WaWRlb1BsYXllci5JbmplY3RvcnMuQWx0SW5qZWN0b3IuZGVidWciXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNENBQTRDO0FBQzVDLGdEQUFnRDs7Ozs7O0FBRWhELElBQU8sT0FBTyxDQTRDYjtBQTVDRCxXQUFPLE9BQU87SUFBQ0EsSUFBQUEsS0FBS0EsQ0E0Q25CQTtJQTVDY0EsV0FBQUEsS0FBS0E7UUFBQ0MsSUFBQUEsYUFBYUEsQ0E0Q2pDQTtRQTVDb0JBLFdBQUFBLGFBQWFBO1lBQUNDLElBQUFBLFdBQVdBLENBNEM3Q0E7WUE1Q2tDQSxXQUFBQSxXQUFXQTtnQkFBQ0MsSUFBQUEsU0FBU0EsQ0E0Q3ZEQTtnQkE1QzhDQSxXQUFBQSxTQUFTQSxFQUFDQSxDQUFDQTtvQkFJdERDO3dCQUFpQ0MsK0JBQVFBO3dCQUVyQ0EscUJB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LGFBQUtBLEtBQUxBLGFBQUtBLFFBNENuQkE7QUFBREEsQ0FBQ0EsRUE1Q00sT0FBTyxLQUFQLE9BQU8sUUE0Q2IiLCJmaWxlIjoiY2xvdWRtZWRpYS12aWRlb3BsYXllci1pbmplY3RvcnMtYWx0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIlR5cGluZ3MvanF1ZXJ5LmQudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiVHlwaW5ncy91bmRlcnNjb3JlLmQudHNcIiAvPlxyXG5cclxubW9kdWxlIE9yY2hhcmQuQXp1cmUuTWVkaWFTZXJ2aWNlcy5WaWRlb1BsYXllci5JbmplY3RvcnMge1xyXG5cclxuICAgIGltcG9ydCBEYXRhID0gT3JjaGFyZC5BenVyZS5NZWRpYVNlcnZpY2VzLlZpZGVvUGxheWVyLkRhdGE7XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIEFsdEluamVjdG9yIGV4dGVuZHMgSW5qZWN0b3Ige1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICAgICAgY29udGFpbmVyOiBIVE1MRWxlbWVudCxcclxuICAgICAgICAgICAgcGxheWVyV2lkdGg6IG51bWJlcixcclxuICAgICAgICAgICAgcGxheWVySGVpZ2h0OiBudW1iZXIsXHJcbiAgICAgICAgICAgIGFzc2V0RGF0YTogRGF0YS5JQXNzZXREYXRhLFxyXG4gICAgICAgICAgICBhcHBseU1lZGlhUXVlcmllczogYm9vbGVhbixcclxuICAgICAgICAgICAgZGVidWdUb0NvbnNvbGU6IGJvb2xlYW4sXHJcbiAgICAgICAgICAgIG5leHRJbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgICAgICAgICAgIHByaXZhdGUgYWx0ZXJuYXRlQ29udGVudDogSlF1ZXJ5W10pIHsgc3VwZXIoY29udGFpbmVyLCBwbGF5ZXJXaWR0aCwgcGxheWVySGVpZ2h0LCBmYWxzZSwgYXNzZXREYXRhLCBhcHBseU1lZGlhUXVlcmllcywgZGVidWdUb0NvbnNvbGUsIG5leHRJbmplY3Rvcik7IH1cclxuXHJcbiAgICAgICAgcHVibGljIGlzU3VwcG9ydGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBpbmplY3QoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIHZhciBmaXJzdFRodW1ibmFpbEFzc2V0ID0gXyh0aGlzLmZpbHRlcmVkQXNzZXRzKCkuVGh1bWJuYWlsQXNzZXRzKS5maXJzdCgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5kZWJ1ZyhcIkluamVjdGluZyBhbHRlcm5hdGUgY29udGVudCBpbnRvIGVsZW1lbnQgJ3swfScuXCIsIHRoaXMuY29udGFpbmVyLmlkKTtcclxuXHJcbiAgICAgICAgICAgIHZhciB3cmFwcGVyID0gJChcIjxkaXY+XCIpXHJcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXCJjbG91ZHZpZGVvLXBsYXllci1hbHQtd3JhcHBlclwiKVxyXG4gICAgICAgICAgICAgICAgLmNzcyhcIndpZHRoXCIsIHRoaXMucGxheWVyV2lkdGgpXHJcbiAgICAgICAgICAgICAgICAuY3NzKFwiaGVpZ2h0XCIsIHRoaXMucGxheWVySGVpZ2h0KTtcclxuICAgICAgICAgICAgaWYgKGZpcnN0VGh1bWJuYWlsQXNzZXQpXHJcbiAgICAgICAgICAgICAgICB3cmFwcGVyLmNzcyhcImJhY2tncm91bmQtaW1hZ2VcIiwgXCJ1cmwoJ1wiICsgZmlyc3RUaHVtYm5haWxBc3NldC5NYWluRmlsZVVybCArIFwiJylcIik7XHJcblxyXG4gICAgICAgICAgICB2YXIgaW5uZXIgPSAkKFwiPGRpdj5cIikuYWRkQ2xhc3MoXCJjbG91ZHZpZGVvLXBsYXllci1hbHQtaW5uZXJcIikuYXBwZW5kVG8od3JhcHBlcik7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5hbHRlcm5hdGVDb250ZW50KVxyXG4gICAgICAgICAgICAgICAgXyh0aGlzLmFsdGVybmF0ZUNvbnRlbnQpLmVhY2goZWxlbSA9PiB7ICQoZWxlbSkuYXBwZW5kVG8oaW5uZXIpOyB9KTtcclxuXHJcbiAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kVG8odGhpcy5jb250YWluZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGRlYnVnKG1lc3NhZ2U6IHN0cmluZywgLi4uYXJnczogYW55W10pOiB2b2lkIHtcclxuICAgICAgICAgICAgc3VwZXIuZGVidWcoXCJBbHRJbmplY3RvcjogXCIgKyBtZXNzYWdlLCBhcmdzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0gIl19
