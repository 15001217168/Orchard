@model Orchard.MultiTenancy.ViewModels.TenantsIndexViewModel
@using Orchard.MultiTenancy.Extensions;

@{
    Style.Require("MultiTenancyAdmin");
    Layout.Title = T("List of Site's Tenants").ToString();
}

<div class="manage">@Display.ActionLink(Value: T("Add a Tenant"), Action: "Add", Area: "Orchard.MultiTenancy", Classes: new [] { "button", "primaryAction" })</div>
<ul class="contentItems tenants">
    @foreach (var tenant in Model.TenantSettings) { 
    <li class="tenant @tenant.State.CurrentState">
        <div class="summary">
            <div class="properties">
                <h3>@tenant.Name @if (!string.IsNullOrEmpty(tenant.RequestUrlHost)) {
                         <span class="tenantHost"> - @Display.Link(Value: Url.Tenant(tenant), Href: Url.Tenant(tenant))</span>
                    }</h3>
            </div>
            <div class="related">
                @if (!string.Equals(tenant.Name, "default", StringComparison.OrdinalIgnoreCase)) { //todo: (heskew) base this off the view model so logic on what can be removed and have its state changed stays in the controller
                    var t = tenant;
                    @Html.DisplayFor(m => t, string.Format("ActionsFor{0}", tenant.State.CurrentState), "") @T(" | ")
                }
                @Display.ActionLink(Value: T("Edit"), Action: "Edit", Area: "Orchard.MultiTenancy", RouteValues: new { name = tenant.Name })
            </div>
        </div>
    </li>
    }
</ul>
